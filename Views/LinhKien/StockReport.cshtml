@model IEnumerable<object>
@{
    Layout = "_AdminLayout";
    var dataList = Model?.ToList() ?? new List<object>();
    bool hasData = dataList.Count > 0;
    // Kiểm tra nếu chỉ có 1 bản ghi mẫu 'Không có dữ liệu'
    if (hasData && dataList.Count == 1)
    {
        var first = dataList[0];
        var nameProp = first.GetType().GetProperty("name");
        if (nameProp != null && nameProp.GetValue(first)?.ToString() == "Không có dữ liệu")
        {
            hasData = false;
        }
    }
    var selectedNameQuery = Context.Request.Query["name"].ToString();
    bool showBarChartByName = !string.IsNullOrEmpty(selectedNameQuery);
}
@section PageActions {
    <div class="btn-group">
        <a asp-action="Index" class="btn btn-secondary">
            <i class="fas fa-arrow-left me-1"></i> Quay Lại Danh Sách
        </a>
    </div>
}

<!-- Bộ lọc báo cáo tồn kho -->
<form method="get" class="row g-3 mb-4 align-items-end" id="stockFilterForm">
    <div class="col-md-3">
        <label class="form-label">Tên linh kiện</label>
        <select name="name" class="form-select">
            <option value="">Tất cả</option>
            @{
                if (ViewBag.NameList != null)
                {
                    foreach (var item in ViewBag.NameList)
                    {
                        var isSelected = Context.Request.Query["name"] == item;
                        @:<option value="@item"@(isSelected ? " selected=\"selected\"" : "")>@item</option>
                    }
                }
            }
        </select>
    </div>
    <div class="col-md-2">
        <label class="form-label">Loại linh kiện</label>
        <select name="category" class="form-select">
            <option value="">Tất cả</option>
            @{
                if (ViewBag.LoaiLinhKienList != null)
                {
                    foreach (var item in ViewBag.LoaiLinhKienList)
                    {
                        var isSelected = Context.Request.Query["category"] == item.Text;
                        @:<option value="@item.Text"@(isSelected ? " selected=\"selected\"" : "")>@item.Text</option>
                    }
                }
            }
        </select>
    </div>
    <div class="col-md-2">
        <label class="form-label">Hãng sản xuất</label>
        <select name="brand" class="form-select">
            <option value="">Tất cả</option>
            @{
                if (ViewBag.BrandList != null)
                {
                    foreach (var item in ViewBag.BrandList)
                    {
                        var isSelected = Context.Request.Query["brand"] == item;
                        @:<option value="@item"@(isSelected ? " selected=\"selected\"" : "")>@item</option>
                    }
                }
            }
        </select>
    </div>
    <div class="col-md-2">
        <label class="form-label">Từ ngày</label>
        <input type="date" name="from" class="form-control" value="@Context.Request.Query["from"]" />
    </div>
    <div class="col-md-2">
        <label class="form-label">Đến ngày</label>
        <input type="date" name="to" class="form-control" value="@Context.Request.Query["to"]" />
    </div>
    <div class="col-md-1">
        <label class="form-label">Tồn kho</label>
        <select name="stock" class="form-select">
            <option value="">Tất cả</option>
            @{
                var stockVal = Context.Request.Query["stock"];
                @:<option value=">50"@(stockVal == ">50" ? " selected=\"selected\"" : "")>&gt; 50</option>
                @:<option value="<5"@(stockVal == "<5" ? " selected=\"selected\"" : "")>&lt; 5</option>
                @:<option value="0"@(stockVal == "0" ? " selected=\"selected\"" : "")>Hết hàng</option>
            }
        </select>
    </div>
    <div class="col-md-12 text-end">
        <button type="submit" class="btn btn-primary"><i class="fas fa-filter me-1"></i> Lọc</button>
        <a href="@Url.Action("StockReport")" class="btn btn-outline-secondary ms-2">Xóa lọc</a>
    </div>
</form>

@if (!hasData)
{
    <div class="alert alert-warning text-center">Không có dữ liệu để hiển thị biểu đồ.</div>
}
else
{
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-chart-bar me-2"></i>Biểu đồ cột – Số lượng tồn kho</h5>
                    <small class="text-muted">
                        @if (showBarChartByName)
                        {
                            <span>Đang hiển thị cho: @selectedNameQuery</span>
                        }
                        else
                        {
                            <span>Tổng hợp theo loại linh kiện</span>
                        }
                    </small>
                </div>
                <div class="card-body">
                    <canvas id="barChart" height="300"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-pie-chart me-2"></i>Biểu đồ tròn – Tỷ lệ tồn kho theo nhóm linh kiện</h5>
                    <small class="text-muted">Ví dụ: màn hình chiếm 40%, pin 30%, mainboard 10%, ...</small>
                </div>
                <div class="card-body">
                    <canvas id="pieChart" height="300"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-chart-line me-2"></i>Biểu đồ đường – Xu hướng tồn kho theo thời gian</h5>
                    <small class="text-muted">Theo tuần/tháng, giúp dự báo tồn kho tăng hay giảm</small>
                </div>
                <div class="card-body">
                    <canvas id="lineChart" height="300"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-chart-bar me-2"></i>Biểu đồ thanh – So sánh số lượng tồn theo từng tên linh kiện</h5>
                    <small class="text-muted">Mỗi cột là số lượng còn tồn của một tên linh kiện</small>
                </div>
                <div class="card-body">
                    <div class="row mb-2">
                        <div class="col-md-3">
                            <select id="barFilterCategory" class="form-select">
                                <option value="">Tất cả loại linh kiện</option>
                                @foreach (var cat in ViewBag.LoaiLinhKienList ?? new List<SelectListItem>())
                                {
                                    <option value="@cat.Text">@cat.Text</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-3">
                            <select id="barFilterBrand" class="form-select">
                                <option value="">Tất cả hãng</option>
                                @foreach (var brand in ViewBag.BrandList ?? new List<string>())
                                {
                                    <option value="@brand">@brand</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-3">
                            <select id="barFilterStock" class="form-select">
                                <option value="">Tất cả tồn kho</option>
                                <option value="low">Sắp hết (≤ 5)</option>
                                <option value="medium">Ít hàng (6 - 20)</option>
                                <option value="high">Còn nhiều (> 20)</option>
                            </select>
                        </div>
                    </div>
                    <canvas id="compareBarChart" height="300"></canvas>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        let compareChart;
        function renderCompareBarChart(data) {
            const topItems = data.slice(0, 20);
            const ctx = document.getElementById('compareBarChart').getContext('2d');
            if (compareChart) compareChart.destroy();
            compareChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: topItems.map(x => x.name),
                    datasets: [{
                        label: 'Số lượng tồn',
                        data: topItems.map(x => x.totalStock),
                        backgroundColor: 'rgba(54, 162, 235, 0.8)'
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { display: false },
                        tooltip: { enabled: true }
                    },
                    scales: {
                        x: { title: { display: true, text: 'Tên linh kiện' } },
                        y: { title: { display: true, text: 'Số lượng tồn' }, beginAtZero: true }
                    }
                }
            });
        }
        function filterBarData(stockData) {
            const cat = $('#barFilterCategory').val();
            const brand = $('#barFilterBrand').val();
            const stock = $('#barFilterStock').val();
            return stockData.filter(x => {
                let ok = true;
                if (cat && x.category !== cat) ok = false;
                if (brand && x.name && !x.name.toLowerCase().includes(brand.toLowerCase())) ok = false;
                if (stock === 'low' && !(x.totalStock > 0 && x.totalStock <= 5)) ok = false;
                if (stock === 'medium' && !(x.totalStock >= 6 && x.totalStock <= 20)) ok = false;
                if (stock === 'high' && !(x.totalStock > 20)) ok = false;
                return ok;
            });
        }
        $(document).ready(function() {
            const stockData = @Html.Raw(Json.Serialize(Model));
            console.log("Stock Data:", stockData);

            if (!stockData || stockData.length === 0 || (stockData.length === 1 && stockData[0].name === "Không có dữ liệu")) {
                console.log("No data to display charts.");
                return;
            }

            const selectedName = '@Context.Request.Query["name"]';

            // === Biểu đồ cột: Tồn kho ===
            const barCtx = document.getElementById('barChart').getContext('2d');
            let barLabels, barData;
            if (selectedName && selectedName !== "") {
                // Chế độ xem chi tiết cho 1 linh kiện
                const filtered = stockData.filter(x => x.name === selectedName);
                barLabels = filtered.map(x => x.category);
                barData = filtered.map(x => x.totalStock);
            } else {
                // Chế độ tổng hợp theo loại linh kiện
                const categoryMap = {};
                stockData.forEach(item => {
                    const cat = item.category;
                    if (!categoryMap[cat]) categoryMap[cat] = 0;
                    categoryMap[cat] += item.totalStock;
                });
                barLabels = Object.keys(categoryMap);
                barData = Object.values(categoryMap);
            }
            new Chart(barCtx, {
                type: 'bar',
                data: {
                    labels: barLabels,
                    datasets: [{
                        label: 'Số lượng tồn',
                        data: barData,
                        backgroundColor: selectedName ? 'rgba(255, 159, 64, 0.8)' : 'rgba(54, 162, 235, 0.8)',
                        borderColor: selectedName ? 'rgba(255, 159, 64, 1)' : 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { display: false },
                        tooltip: { enabled: true }
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: selectedName ? 'Loại linh kiện' : 'Tên loại linh kiện'
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'Số lượng tồn'
                            },
                            beginAtZero: true
                        }
                    }
                }
            });

            // === 2. Biểu đồ tròn: Tỷ lệ tồn kho theo nhóm ===
            const categoryMap = {};
            stockData.forEach(item => {
                const cat = item.category;
                if (!categoryMap[cat]) {
                    categoryMap[cat] = 0;
                }
                categoryMap[cat] += item.totalStock;
            });

            const pieLabels = Object.keys(categoryMap);
            const pieData = Object.values(categoryMap);

            if (pieLabels.length > 0) {
                const pieCtx = document.getElementById('pieChart').getContext('2d');
                new Chart(pieCtx, {
                    type: 'pie',
                    data: {
                        labels: pieLabels,
                        datasets: [{
                            data: pieData,
                            backgroundColor: [
                                'rgba(54, 162, 235, 0.8)',
                                'rgba(255, 99, 132, 0.8)',
                                'rgba(255, 205, 86, 0.8)',
                                'rgba(75, 192, 192, 0.8)',
                                'rgba(153, 102, 255, 0.8)',
                                'rgba(255, 159, 64, 0.8)'
                            ]
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: { position: 'bottom' },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const label = context.label || '';
                                        const value = context.parsed;
                                        const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                        const percent = ((value / total) * 100).toFixed(1);
                                        return `${label}: ${value} (${percent}%)`;
                                    }
                                }
                            }
                        }
                    }
                });
            }

            // === 3. Biểu đồ đường: Xu hướng tồn kho ===
            const weeks = 6;
            const totalStockHistory = Array(weeks).fill(0);
            stockData.forEach(item => {
                if (item.stockHistory && item.stockHistory.length === weeks) {
                    for (let i = 0; i < weeks; i++) {
                        totalStockHistory[i] += item.stockHistory[i];
                    }
                }
            });

            const lineLabels = Array.from({length: weeks}, (_, i) => `Tuần ${i+1}`);
            const lineCtx = document.getElementById('lineChart').getContext('2d');
            new Chart(lineCtx, {
                type: 'line',
                data: {
                    labels: lineLabels,
                    datasets: [{
                        label: 'Tổng tồn kho',
                        data: totalStockHistory,
                        borderColor: 'rgba(54, 162, 235, 1)',
                        backgroundColor: 'rgba(0,0,0,0)',
                        tension: 0.3
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { position: 'top' },
                        tooltip: { enabled: true }
                    },
                    scales: {
                        x: { title: { display: true, text: 'Thời gian' } },
                        y: { title: { display: true, text: 'Số lượng tồn' }, beginAtZero: true }
                    }
                }
            });

            // === 4. Biểu đồ thanh: So sánh số lượng tồn theo từng tên linh kiện ===
            renderCompareBarChart(stockData);
            $('#barFilterCategory, #barFilterBrand, #barFilterStock').on('change', function() {
                const filtered = filterBarData(stockData);
                renderCompareBarChart(filtered);
            });
        });
    </script>
} 