@{
    ViewData["Title"] = "Báo cáo thống kê phiếu sửa";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    var khachHangList = ViewBag.KhachHangList as IEnumerable<SelectListItem>;
    var nhanVienList = ViewBag.NhanVienList as IEnumerable<SelectListItem>;
}

<div class="container-fluid py-3">
    <h2 class="mb-4"><i class="fas fa-chart-bar me-2"></i>Báo cáo thống kê phiếu sửa</h2>
    <div class="row mb-3">
        <div class="col-md-4 col-lg-3">
            <label class="form-label fw-bold">Chọn kiểu thống kê</label>
            <select id="filter-type" class="form-select">
                <option value="month">Theo tháng</option>
            </select>
        </div>
        <div class="col-md-3 col-lg-2">
            <label class="form-label fw-bold">Năm</label>
            <input id="filter-year" type="number" class="form-control" min="2000" max="2100" value="@DateTime.Now.Year" />
        </div>
        <div class="col-md-3 col-lg-2 d-none" id="month-group">
            <!-- Ẩn chọn tháng vì chỉ xem theo năm (12 tháng) -->
        </div>
        <div class="col-md-3 col-lg-2 d-none" id="week-group">
            <!-- Ẩn chọn tuần -->
        </div>
        <div class="col-md-2 d-flex align-items-end">
            <button id="btn-filter" class="btn btn-primary w-100"><i class="fas fa-filter me-1"></i>Lọc</button>
        </div>
    </div>

    <div class="row g-4">
        <div class="col-lg-6">
            <div class="card shadow-sm">
                <div class="card-header bg-success text-white">
                    <i class="fas fa-chart-bar me-2"></i>Doanh thu phiếu sửa theo tháng (Bar Chart)
                </div>
                <div class="card-body">
                    <canvas id="chart-tongtien" height="320"></canvas>
                </div>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card shadow-sm">
                <div class="card-header bg-info text-white">
                    <i class="fas fa-chart-bar me-2"></i>Top 5 dịch vụ được sử dụng nhiều nhất
                </div>
                <div class="card-body">
                    <canvas id="chart-topdichvu" height="320"></canvas>
                </div>
            </div>
        </div>
    </div>
    <div class="row g-4 mt-2">
        <div class="col-lg-6">
            <div class="card shadow-sm">
                <div class="card-header bg-warning text-dark">
                    <i class="fas fa-chart-bar me-2"></i>Top 5 linh kiện được dùng nhiều nhất (Bar Chart)
                </div>
                <div class="card-body">
                    <canvas id="chart-toplinhkien-bar" height="320"></canvas>
                </div>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card shadow-sm">
                <div class="card-header bg-danger text-white">
                    <i class="fas fa-chart-pie me-2"></i>Top 5 linh kiện được dùng nhiều nhất (Pie Chart)
                </div>
                <div class="card-body">
                    <canvas id="chart-toplinhkien-pie" height="320"></canvas>
                </div>
            </div>
        </div>
    </div>
    <div class="row g-4 mt-2">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header bg-secondary text-white">
                    <i class="fas fa-history me-2"></i>Lịch sử thao tác
                </div>
                <div class="card-body">
                    <form id="history-filter-form" class="row g-2 mb-3">
                        <div class="col-md-4">
                            <input type="text" class="form-control" id="filter-nguoi" placeholder="Lọc theo người sửa...">
                        </div>
                        <div class="col-md-4">
                            <select class="form-select" id="filter-action">
                                <option value="">Tất cả thao tác</option>
                                <option value="create">Tạo mới</option>
                                <option value="update">Cập nhật</option>
                                <option value="delete">Xóa</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <button type="button" class="btn btn-primary w-100" id="btn-filter-history"><i class="fas fa-filter me-1"></i>Lọc</button>
                        </div>
                    </form>
                    <div class="table-responsive">
                        <table class="table table-bordered table-hover align-middle" id="history-table">
                            <thead class="table-light">
                                <tr>
                                    <th>Ngày</th>
                                    <th>Khách hàng</th>
                                    <th>Nhân viên</th>
                                    <th>Dịch vụ</th>
                                    <th>Linh kiện</th>
                                    <th>Tổng tiền</th>
                                </tr>
                            </thead>
                            <tbody id="history-tbody">
                                <!-- Dữ liệu sẽ được render bằng JS -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Các biểu đồ khác có thể ẩn hoặc bỏ đi nếu chỉ cần doanh thu theo tháng -->
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        let chartTongTien;
        function renderDoanhThuBarChart(labels, tongTienData) {
            if (chartTongTien) chartTongTien.destroy();
            const ctx = document.getElementById('chart-tongtien').getContext('2d');
            chartTongTien = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Tổng tiền (VNĐ)',
                        data: tongTienData,
                        backgroundColor: '#28a745',
                        borderRadius: 6,
                        maxBarThickness: 40
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return 'Tổng tiền: ' + context.parsed.y.toLocaleString('vi-VN') + ' VNĐ';
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Tháng'
                            }
                        },
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Doanh thu (VNĐ)'
                            },
                            ticks: {
                                callback: function(value) {
                                    return value.toLocaleString('vi-VN');
                                }
                            }
                        }
                    }
                }
            });
        }

        let chartTopDichVu;
        function renderTopDichVuChart(labels, data) {
            if (chartTopDichVu) chartTopDichVu.destroy();
            const ctx = document.getElementById('chart-topdichvu').getContext('2d');
            chartTopDichVu = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Số lần sử dụng',
                        data: data,
                        backgroundColor: '#17a2b8',
                        borderRadius: 6,
                        maxBarThickness: 40
                    }]
                },
                options: {
                    indexAxis: 'y', // Biểu đồ cột ngang
                    responsive: true,
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return 'Số lần: ' + context.parsed.x;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Số lần sử dụng'
                            },
                            ticks: {
                                precision: 0
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'Dịch vụ'
                            },
                            ticks: {
                                align: 'center', // Căn giữa nhãn dịch vụ
                                // padding: 10
                            }
                        }
                    }
                }
            });
        }

        let chartTopLinhKienBar, chartTopLinhKienPie;
        function renderTopLinhKienBarChart(labels, data) {
            if (chartTopLinhKienBar) chartTopLinhKienBar.destroy();
            const ctx = document.getElementById('chart-toplinhkien-bar').getContext('2d');
            chartTopLinhKienBar = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Số lượng sử dụng',
                        data: data,
                        backgroundColor: '#ffc107',
                        borderRadius: 6,
                        maxBarThickness: 40
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return 'Số lượng: ' + context.parsed.y;
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Linh kiện'
                            }
                        },
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Số lượng sử dụng'
                            },
                            ticks: {
                                precision: 0
                            }
                        }
                    }
                }
            });
        }
        function renderTopLinhKienPieChart(labels, data) {
            if (chartTopLinhKienPie) chartTopLinhKienPie.destroy();
            const ctx = document.getElementById('chart-toplinhkien-pie').getContext('2d');
            chartTopLinhKienPie = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Số lượng sử dụng',
                        data: data,
                        backgroundColor: [
                            '#ff6384', '#36a2eb', '#ffce56', '#4bc0c0', '#9966ff'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { position: 'bottom' },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    let label = context.label || '';
                                    let value = context.parsed;
                                    return label + ': ' + value;
                                }
                            }
                        }
                    }
                }
            });
        }

        async function fetchTopDichVuAndRender() {
            const year = $('#filter-year').val();
            let url = `/PhieuSuaThongKe/GetTopDichVu?type=month&year=${year}`;
            const res = await fetch(url);
            const data = await res.json();
            // data: [{ tenDichVu, soLan }]
            const labels = data.map(x => x.tenDichVu);
            const soLanData = data.map(x => x.soLan);
            renderTopDichVuChart(labels, soLanData);
        }

        async function fetchTopLinhKienAndRender() {
            const year = $('#filter-year').val();
            let url = `/PhieuSuaThongKe/GetTopLinhKien?type=month&year=${year}`;
            const res = await fetch(url);
            const data = await res.json();
            // data: [{ tenLinhKien, soLan }]
            const labels = data.map(x => x.tenLinhKien);
            const soLanData = data.map(x => x.soLan);
            renderTopLinhKienBarChart(labels, soLanData);
            renderTopLinhKienPieChart(labels, soLanData);
        }

        async function fetchDataAndRender() {
            const year = $('#filter-year').val();
            // Gọi API lấy tổng tiền từng tháng trong năm
            let url = `/PhieuSuaThongKe/GetThongKe?type=month&year=${year}`;
            const res = await fetch(url);
            const data = await res.json();
            // labels: Tháng 1-12, tongTienData: tổng tiền từng tháng
            let labels = [];
            let tongTienData = [];
            for (let m = 1; m <= 12; m++) {
                labels.push('Tháng ' + m);
                // Tìm phần tử có label == m (dạng '01', '02', ...)
                let mm = m.toString().padStart(2, '0');
                let found = data.find(x => x.label == mm);
                tongTienData.push(found ? found.tongTien : 0);
            }
            renderDoanhThuBarChart(labels, tongTienData);
            // Gọi thêm top dịch vụ
            fetchTopDichVuAndRender();
            // Gọi thêm top linh kiện
            fetchTopLinhKienAndRender();
        }

        // Lịch sử thao tác lấy từ API phiếu sửa hoàn thành
        async function fetchHistoryData() {
            // Có thể thêm filter theo năm/tháng nếu muốn
            const res = await fetch('/PhieuSuaThongKe/GetLichSuHoanThanh');
            const data = await res.json();
            return data;
        }
        function renderHistoryTable(data) {
            const tbody = $('#history-tbody');
            tbody.empty();
            if (data.length === 0) {
                tbody.append('<tr><td colspan="6" class="text-center text-muted">Không có dữ liệu</td></tr>');
                return;
            }
            // Lấy SelectList từ Razor sang JS
            const khachHangList = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject((khachHangList != null ? khachHangList.Select(x => new { value = x.Value, text = x.Text }).ToList() : new List<object>())));
            const nhanVienList = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject((nhanVienList != null ? nhanVienList.Select(x => new { value = x.Value, text = x.Text }).ToList() : new List<object>())));
            data.forEach(row => {
                let khachHang = row.khachHang;
                let nhanVien = row.nhanVien;
                // Nếu không có tên, map từ SelectList
                if ((!khachHang || khachHang === "") && row.maKhachHang && khachHangList.length > 0) {
                    const kh = khachHangList.find(x => x.value == row.maKhachHang);
                    khachHang = kh ? kh.text : '<span class="text-danger">Không xác định</span>';
                }
                if ((!nhanVien || nhanVien === "") && row.maNhanVien && nhanVienList.length > 0) {
                    const nv = nhanVienList.find(x => x.value == row.maNhanVien);
                    nhanVien = nv ? nv.text : '<span class="text-danger">Không xác định</span>';
                }
                // Hiển thị ngày/giờ hoàn thành nếu có, nếu không thì lấy ngày
                let ngayDisplay = row.ngayGioHoanThanh ? row.ngayGioHoanThanh : row.ngay;
                tbody.append(`<tr>
                    <td>${ngayDisplay}</td>
                    <td>${khachHang ? khachHang : '<span class="text-danger">Không xác định</span>'}</td>
                    <td>${nhanVien ? nhanVien : '<span class="text-danger">Không xác định</span>'}</td>
                    <td>${row.dichVu}</td>
                    <td>${row.linhKien}</td>
                    <td>${Number(row.tongTien).toLocaleString('vi-VN')} VNĐ</td>
                </tr>`);
            });
        }
        let historyData = [];
        function filterHistory() {
            const nguoi = $('#filter-nguoi').val().toLowerCase();
            // Có thể mở rộng filter theo khách hàng, nhân viên, dịch vụ...
            let filtered = historyData.filter(row => {
                let matchUser = !nguoi || row.nhanVien.toLowerCase().includes(nguoi) || row.khachHang.toLowerCase().includes(nguoi);
                return matchUser;
            });
            renderHistoryTable(filtered);
        }
        $('#btn-filter-history').on('click', function(e) {
            e.preventDefault();
            filterHistory();
        });
        $('#filter-nguoi').on('input', function() {
            filterHistory();
        });
        // Render lần đầu
        $(document).ready(async function() {
            historyData = await fetchHistoryData();
            renderHistoryTable(historyData);
        });

        $(document).ready(function() {
            $('#btn-filter').on('click', function(e) {
                e.preventDefault();
                fetchDataAndRender();
            });
            // Tự động load lần đầu
            fetchDataAndRender();
        });
    </script>
} 